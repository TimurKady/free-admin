# -*- coding: utf-8 -*-
"""
project_initializer

Project scaffolding helpers for the init CLI command.

Version:0.1.0
Author: Timur Kady
Email: timurkady@yandex.com
"""

from __future__ import annotations

from pathlib import Path
from typing import Dict

from .reporting import CreationReport


class ProjectInitializer:
    """Build the base filesystem layout for a Free Admin project."""

    _DIRECTORIES = (
        "config",
        "apps",
        "pages",
        "static",
        "templates",
    )

    _CONFIG_TEMPLATES: Dict[str, str] = {
        "main.py": '''# -*- coding: utf-8 -*-
"""
main

Application bootstrap for {project_name}.

Version:0.1.0
Author: Timur Kady
Email: timurkady@yandex.com
"""

from __future__ import annotations

from fastapi import FastAPI


class ApplicationFactory:
    """Create FastAPI applications for the project."""

    def build(self) -> FastAPI:
        """Return a FastAPI instance with default metadata."""
        return FastAPI(title="{project_name} administration")


app = ApplicationFactory().build()


# The End

''',  # noqa: E501
        "orm.py": '''# -*- coding: utf-8 -*-
"""
orm

Database configuration entry point for {project_name}.

Version:0.1.0
Author: Timur Kady
Email: timurkady@yandex.com
"""

from __future__ import annotations

from typing import Dict


class ORMSettings:
    """Provide placeholder ORM configuration values."""

    def template(self) -> Dict[str, str]:
        """Return a dictionary with example ORM configuration."""
        return {{"default": "sqlite:///db.sqlite3"}}


# The End

''',  # noqa: E501
        "settings.py": '''# -*- coding: utf-8 -*-
"""
settings

Primary configuration object for {project_name}.

Version:0.1.0
Author: Timur Kady
Email: timurkady@yandex.com
"""

from __future__ import annotations

from pydantic import BaseSettings


class ProjectSettings(BaseSettings):
    """Basic settings model for the generated project."""

    debug: bool = True
    database_url: str = "sqlite:///db.sqlite3"


settings = ProjectSettings()


# The End

''',  # noqa: E501
    }

    _README_TEMPLATE = """# {project_name}\n\nThis project was generated by the free-admin CLI utility. Customize the configuration in the `config/` directory.\n"""

    def __init__(self, base_path: Path | None = None) -> None:
        """Prepare the initializer with the filesystem base path."""
        self._base_path = base_path or Path.cwd()

    def create_project(self, project_name: str) -> CreationReport:
        """Create or update the project skeleton under the base path."""
        project_root = self._base_path / project_name
        report = CreationReport(project_root)

        if project_root.exists():
            report.add_skipped(project_root)
        else:
            project_root.mkdir(parents=True, exist_ok=True)
            report.add_created(project_root)

        for directory in self._DIRECTORIES:
            directory_path = project_root / directory
            if directory_path.exists():
                report.add_skipped(directory_path)
                continue
            directory_path.mkdir(parents=True, exist_ok=True)
            report.add_created(directory_path)

        self._create_config_files(project_root, report, project_name)
        self._create_readme(project_root, report, project_name)
        return report

    def _create_config_files(
        self,
        project_root: Path,
        report: CreationReport,
        project_name: str,
    ) -> None:
        config_dir = project_root / "config"
        for file_name, template in self._CONFIG_TEMPLATES.items():
            file_path = config_dir / file_name
            if file_path.exists():
                report.add_skipped(file_path)
                continue
            file_path.write_text(
                template.format(project_name=project_name),
                encoding="utf-8",
            )
            report.add_created(file_path)

    def _create_readme(
        self,
        project_root: Path,
        report: CreationReport,
        project_name: str,
    ) -> None:
        readme_path = project_root / "README.md"
        if readme_path.exists():
            report.add_skipped(readme_path)
            return
        readme_path.write_text(
            self._README_TEMPLATE.format(project_name=project_name),
            encoding="utf-8",
        )
        report.add_created(readme_path)


# The End

