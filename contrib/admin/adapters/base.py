# -*- coding: utf-8 -*-
"""
base

Adapter protocol defining the required interface for admin services.

Version: 0.1.0
Author: Timur Kady
Email: timurkady@yandex.com
"""

from __future__ import annotations

from typing import Any, Protocol, runtime_checkable

from ..core.filters import FilterSpec


@runtime_checkable
class BaseAdapter(Protocol):
    """Protocol that all admin ORM adapters must implement."""

    name: str
    model_modules: list[str]
    QuerySet: Any
    Q: Any
    DoesNotExist: type[Exception]
    MultipleObjectsReturned: type[Exception]
    IntegrityError: type[Exception]

    # models exposed by adapters
    user_model: type
    group_model: type
    group_permission_model: type
    user_permission_model: type
    content_type_model: type
    system_setting_model: type
    perm_action: type

    # basic ORM helpers
    def get_model_descriptor(self, model: type) -> Any: ...
    def get_model(self, dotted: str) -> type: ...
    def get_pk_attr(self, model: type[Any]) -> str: ...

    def all(self, qs_or_model: Any) -> Any: ...
    def filter(self, qs_or_model: Any, **filters: Any) -> Any: ...
    def apply_filter_spec(self, qs_or_model: Any, specs: list[FilterSpec]) -> Any: ...
    def order_by(self, qs: Any, *fields: str) -> Any: ...
    def limit(self, qs: Any, limit: int) -> Any: ...
    def offset(self, qs: Any, offset: int) -> Any: ...
    def select_related(self, qs: Any, *related: str) -> Any: ...
    def prefetch_related(self, qs: Any, *related: str) -> Any: ...
    def annotate(self, qs: Any, annotations: dict) -> Any: ...
    def distinct(self, qs: Any, *fields: str) -> Any: ...
    def only(self, qs: Any, *fields: str) -> Any: ...

    async def fetch_all(self, qs: Any) -> list[Any]: ...
    async def fetch_values(
        self, qs: Any, *fields: str, flat: bool = False
    ) -> list[Any]: ...

    async def count(self, qs: Any) -> int: ...
    async def get(self, qs_or_model: Any, **filters: Any) -> Any: ...
    async def get_or_none(self, qs_or_model: Any, **filters: Any) -> Any: ...
    async def exists(self, qs: Any) -> bool: ...
    async def save(self, obj: Any) -> None: ...
    async def delete(self, obj: Any) -> None: ...
    async def create(self, model: type, **data: Any) -> Any: ...
    async def values_list(
        self, qs: Any, *fields: str, flat: bool = False
    ) -> list[Any]: ...

# The End

